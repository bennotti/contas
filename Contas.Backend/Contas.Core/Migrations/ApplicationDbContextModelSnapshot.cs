// <auto-generated />
using System;
using Contas.Core.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Contas.Core.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Contas.Core.Models.AspNetRoles", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(56)")
                        .HasMaxLength(56);

                    b.Property<bool>("Ativo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataUltimaAlteracao")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(254)")
                        .HasMaxLength(254);

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "A9F8316C-0749-4AAF-8AA5-F19759A5B469",
                            Ativo = true,
                            ConcurrencyStamp = "d964e4fd-525a-4e36-8af2-d85eb65e10e2",
                            DataCadastro = new DateTime(2020, 12, 24, 17, 52, 53, 632, DateTimeKind.Local).AddTicks(7140),
                            DataUltimaAlteracao = new DateTime(2020, 12, 24, 17, 52, 53, 632, DateTimeKind.Local).AddTicks(7151),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Contas.Core.Models.AspNetUserRoles", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(56)")
                        .HasMaxLength(56);

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(56)")
                        .HasMaxLength(56);

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "30920176-94A7-44C4-997A-116CABF5709F",
                            RoleId = "A9F8316C-0749-4AAF-8AA5-F19759A5B469"
                        });
                });

            modelBuilder.Entity("Contas.Core.Models.AspNetUserTokens", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(56)")
                        .HasMaxLength(56);

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Contas.Core.Models.AspNetUsers", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(56)")
                        .HasMaxLength(56);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("AlterPassword")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("Ativo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataUltimaAlteracao")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(254)")
                        .HasMaxLength(254);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(254)")
                        .HasMaxLength(254);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "30920176-94A7-44C4-997A-116CABF5709F",
                            AccessFailedCount = 0,
                            AlterPassword = false,
                            Ativo = true,
                            ConcurrencyStamp = "7daf5085-69ea-431a-8fd6-9e219ef865e9",
                            DataCadastro = new DateTime(2020, 12, 24, 17, 52, 53, 648, DateTimeKind.Local).AddTicks(36),
                            DataUltimaAlteracao = new DateTime(2020, 12, 24, 17, 52, 53, 648, DateTimeKind.Local).AddTicks(45),
                            EmailConfirmed = false,
                            FullName = "Admin",
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEIyK+dDtkBs2FJGWuOejH5diX8GLElSm1i0jAJ1NuowNMbXLt4Hq9nR3U1Xoptgd3Q==",
                            SecurityStamp = "09823267-d590-40de-85f3-8cd03c09edb7",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Contas.Core.Models.JwtTokens", b =>
                {
                    b.Property<int>("JwtTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Ativo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataExpiracao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataRevogacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataUltimaAlteracao")
                        .HasColumnType("datetime");

                    b.Property<string>("IpCriacao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IpRevogacao")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("varchar(56)");

                    b.HasKey("JwtTokenId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("JwtTokens");
                });

            modelBuilder.Entity("Contas.Core.Models.TbContas", b =>
                {
                    b.Property<int>("ContaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Ativo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataUltimaAlteracao")
                        .HasColumnType("datetime");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Pagamento")
                        .HasColumnType("datetime");

                    b.Property<int>("QntDiasAtraso")
                        .HasColumnType("int");

                    b.Property<double>("ValorFinal")
                        .HasColumnType("double");

                    b.Property<double>("ValorMulta")
                        .HasColumnType("double");

                    b.Property<double>("ValorOriginal")
                        .HasColumnType("double");

                    b.Property<DateTime>("Vencimento")
                        .HasColumnType("datetime");

                    b.HasKey("ContaId");

                    b.ToTable("Contas");
                });

            modelBuilder.Entity("Contas.Core.Models.AspNetUserRoles", b =>
                {
                    b.HasOne("Contas.Core.Models.AspNetRoles", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Contas.Core.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Contas.Core.Models.AspNetUserTokens", b =>
                {
                    b.HasOne("Contas.Core.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Contas.Core.Models.JwtTokens", b =>
                {
                    b.HasOne("Contas.Core.Models.AspNetUsers", "Usuario")
                        .WithMany("JwtTokens")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
